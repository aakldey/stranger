SpriteTile Release Notes
------------------------

SpriteTile 2.2.1

Fixes:
	• TileEditor window works in a new project without the demos imported.

-----------

SpriteTile 2.2

Additions:
	• Multi-camera support. An arbitrary number of cameras in any configuration can be used, and each camera will only draw as many tiles as needed, the same as with a single camera.
	• Tile.AddLayer, for adding new layers to a level at runtime.

Changes:
	• Level layers are reversed, in order to be consistent with Unity's layer order. That is, layer 0 is now the bottom layer and higher layer numbers are on top. Existing levels can be converted easily in the TileEditor by using the layer up/down buttons.
	• Tile.SetCamera can use a Camera[] array in addition to a single camera. Also, calling SetCamera() with no arguments will use all cameras tagged MainCamera (if there are more than one) instead of just the first.
	• Tile.ScreenToMapPosition can optionally take a camera number, if multiple cameras are used.

Fixes:
	• Tile.GetLevelBytes returns correct data if tiles have been rearranged, so levels saved in code will work properly.
	• Cameras with altered viewport rects work correctly.

TileEditor Additions:
	• "Show preceding layer" toggle, for drawing the layer underneath the current layer, if such a layer exists and has the same dimensions as the current layer. The preceding layer is drawn at 50% alpha to make it easier to distinguish from the current layer.
	• "Show next layer" toggle, for drawing the layer on top of the current layer, with the same conditions as above. The next layer is drawn at 50% alpha so you can still see what you're doing.

TileEditor Changes:
	• If a tile already exists in the current set, it won't be loaded. This means that you can add new sprites to a sprite sheet, load the sprite sheet with the "Load" button, and only the new tiles will be added. This also means that you can add a number of sprites to a folder, load them using the "From Folder" button, and again only the new tiles will be added.
	• The undo queue is no longer reset when changing layers. If you undo a change that was made on a layer other than the one currently selected, you're automatically switched to that layer and the undo is performed. (Unless you're showing the preceding or next layer and the undo occurs on that layer, in which case you can see the undo occur anyway so there's no need to switch.)
	• The currently-selected layer number is saved with the level, so you don't need to manually switch to the layer you were working on last when loading a level.
	• The "new level" button confirmation dialog text is better worded, and won't appear if the level is saved.

TileEditor Fixes:
	• Adding and removing tiles from Random groups works correctly if the tiles have been rearranged.
	• If deleted tiles are in the undo queue, undoing will work without errors.

-----------

SpriteTile 2.1

Additions:
	• Tile.AnimateTile function, for animating a specified kind of tile with a given frame sequence.
	• Tile.StopAnimatingTile function, for stopping the animation for the specified kind of tile.
	• Tile.AnimateTileRange function, for animating a range of tiles. Useful for things like water tile animations, flickering torch animations, etc., where you don't necessarily want all the tiles to animate in sync.
	• Tile.StopAnimatingTileRange function, for stopping a range of tile animations at once.
	• Tile.GetMapBlock function, for getting a section of a map that contains all tile data (tile, order, rotation, etc.).
	• Tile.SetMapBlock function, for putting that section somewhere in a map. So with GetMapBlock and SetMapBlock you can easily copy/paste parts of the map with code, either in the same layer or between different layers.
	• Tile.SetLayerColor function, for tinting all the tiles on the specified layer with a color.
	• Tile.SetColliderLayer function, for setting the GameObject layer of colliders. (Not related to SpriteTile layers.)
	• Tile.SetTileScale and Tile.SetTileLayerScale functions, for setting the scale of sprites. This can be used for special effects or, if you're having issues with occasional gaps between tiles, fixing that problem by using a scale slightly greater than 1.0.

Fixes:
	• Loading a new scene (as in Unity scene, not SpriteTile level) is handled properly.
	• Tile.SetCamera works correctly when called with different cameras, subsequent to the first call.
	• Tile.GetMapPosition and Tile.GetWorldPosition return correct coordinates if Tile.SetLayerPosition has been used.

TileEditor Additions:
	• A new group type, "Random", where you can add a list of tiles to a group, and when drawing with that group, the actual tile is randomly selected from the list. Useful for quickly adding variety when you have a number of similar tiles (grass, dirt, water, etc.). Also works when filling a selection box, so every tile in the selection is randomly chosen.
	• Multi-select for the Tiles section, where shift-clicking another tile will select the range of tiles, so changing the default collider/order-in-layer/rotation/etc. will be applied to all the selected tiles in the range. Also good for adding multiple tiles to Random groups with one click.
	• Up and down buttons for layers, which can be used to rearrange layers easily by moving them up or down in the list.
	• A "Sync ScrollView Position" toggle, which keeps the same scrollview position and preview size in the Level view, when switching between layers that have the same dimensions. Otherwise, all layers remember their own scrollview positions and preview size.

TileEditor Changes:
	• The "Editor Preview" button is replaced by two buttons, "This Layer" and "All Layers", for making the preview show the respective layers.
	• The tile "Name" and "Number" toggle states are saved in the editor preferences, along with the currently selected tileset and the grid toggle.
	• Changing layers can also be done from the keyboard, using alt+up arrow and alt+down arrow.

TileEditor Fixes:
	• When using the "Replace" button, the TileManager is updated correctly.
	• If the TileEditor window is kept open during play mode, it will be usable again when play mode is stopped, without having to close and re-open it.
	• Changing the default order-in-layer for a tile in the Tiles section and then drawing the tile will always work correctly. Groups with various order-in-layer values are also always drawn correctly.
	• After creating a group, the mouse wheel continues to work for the Tiles section.
	• When clicking "Refresh" with the tile numbers displayed, the tile numbers remain correct.

-----------

SpriteTile 2.0
	• A number of things have changed--if you're upgrading, you will need to read the update note file carefully! Make sure you have a backup of your project in case something goes wrong (which it won't, but better safe than sorry)!

Additions:
	• The screen size/aspect ratio/orientation can be changed arbitrarily at runtime, and the tiles will be automatically updated as needed.
	• Tile.LoadGroups for loading a groups file.
	• Tile.CopyGroupToPosition for copying a specified group to a position in the map, with an optional offset (for adjusting the "pivot point" of the group).

Changes:
	• Tile.SetCameraAuto is removed, and Tile.SetCamera now does what SetCameraAuto used to do. Tile.MoveCamera and Tile.SetCameraPosition are also removed. If you were using those functions, just move the camera's transform directly. (As a side effect, the problem with using SetCamera in Awake in webplayers is apparently banished.)
	• You can move the camera on the z axis (zoom in/out) for perspective cameras, or change the orthographic size for orthographic cameras, and the tiles will be automatically updated as needed. Note that zooming out can potentially create tons of GameObjects if you zoom out too far, so limit zooming to a sensible amount.
	• Since camera rotation can potentially cause errors, having the camera not be rotated is enforced.
	• Tile.SetTileMaterial can be used to set the material of a particular type of tile, so all instances of that tile will have a given material.
	• Tile.SetTileMaterial can also be used to set the material of a specific tile in the map. These two methods can be combined, where setting a material for a specific tile in the map will override the material for a tile type.
	• A non-square tile grid is possible now, so Tile.NewLevel can use a Vector2 for the tile size instead of a float. A float can still be used, in which case the X and Y tile grid sizes will be the same.
	• Likewise, the LevelData class now uses a Vector2 for the tile size.
	• Tile.GetTileSize returns a Vector2 instead of a float (guess why!).
	• Tile.SetCamera should now be called before NewLevel or LoadLevel, instead of after. This means there's no need to track whether SetCamera has been called after loading a level, since it can just be called once in Awake or whatever and forgotten about.
	• For the sake of consistency, tile layer positions are always reset when loading a level or making a new level, even if the level is the same size as the previous level.
	• The level format is version 2 now. SpriteTile 2.0 will load files from earlier versions, but SpriteTile 1.2 and earlier will not be able to load SpriteTile 2.0 files.
	• The Editor and Resources folders have been moved to a SpriteTile folder for better organization. (The Plugins folder is not moved, since that's a Unity limitation, sorry.)

Fixes:
	• Fixed issue with loading a level of the same size as the previous level, where on-screen tiles could fail to update properly.
	• Fixed error that could potentially occur in camera movement code with non-square levels.
	• Changed use of System.Text.Encoding.ASCII to System.Text.Encoding.UTF8 for better compatibility.

TileEditor Additions:
	• There's a ">" button next to "Tile size", which enables a non-square tile grid; the "Tile size" changes to "Tile size X" and "Tile size Y". Click the "<" button to change back to a square tile grid.
	• There is a "Move" button now for the tile list (which replaces the "Delete" button, which has been moved: see below). This is useful for rearranging tiles after they've been imported, in case you want a different order for coding or other purposes. You can move tiles around in the list as desired without having to worry about messing up either the current level, or previously-saved levels or groups. They will continue to load and work as normal.
	• Tiles have a "Non-transparent" checkbox, which if checked will cause them to use a non-transparent shader by default. Opaque shaders can improve performance, so it's usually a good idea to enable this for tiles that have no transparent pixels.
	• Tiles also have a "Use dynamic lighting" checkbox, which if checked will cause them to use a lighting-enabled shader by default. Lighting will reduce performance, so leave this disabled unless you need the tile to react to lighting.
	• Options to auto-load the most recently used level and group files whenever the TileEditor window is opened.

TileEditor Changes:
	• The "Delete" button for tiles is changed so that it's only accessible after clicking the "Move" button first.
	• The trigger overlay will also show the trigger numbers on the tiles, so they can be seen at a glance without having to hover over the tiles.
	• Using the "pick tile" function (pressing the "p" key) will scroll the Tiles window to the selected tile.
	• Improved path handling when loading and saving levels/groups/sprites, and the saved paths are also per-project now instead of universal.

TileEditor Fixes:
	• Fixed loaded groups being upside-down.
	• Fixed issues with groups not being handled correctly when deleting a tile.
	• Tiles that are part of atlases keep their number suffix when using the Refresh button or re-starting the TileEditor. They also use the Unity sprite name now, so they start with 0 instead of 1. e.g. MyTile-1 becomes MyTile_0.
	• Using the "pick tile" function will work if the tile is the first tile in a set.
	• Fixed editor preview displaying too large previews anyway and potentially crashing the editor.

-----------

SpriteTile 1.2.3

Improvements:
	• Colliders on empty cells are visible now in the TileEditor.

Fixes:
	• Setting tiles with physics colliders from code will work when using SetCamera.
	• Saving levels works if using the TileEditor DLL.

-----------

SpriteTile 1.2.2

Additions:
	• Tile.UseTileEditorDefaults function, for using the per-tile defaults set in the TileEditor when calling Tile.SetTile/SetTileBlock.

Fixes:
	• Fixed bug where levels saved from the TileEditor would not save some properties correctly.
	• Fixed bug in the TileEditor where deleting the last sprite set in the list would not work correctly in the TileManager asset.
	• Prevented TileEditor from loading Multiple sprites where the count was > 1024.
	• Tile.SetRotationBlock and Tile.SetOrderBlock will work correctly on-screen if p2 < p1.

-----------

SpriteTile 1.2.1

Fixes:
	• The TileEditor correctly tints the collider overlay depending on whether physics colliders are used for a tile.
	• Fixed small glitch with the efficiency of updating physics colliders from code.

-----------

SpriteTile 1.2

Additions:
	• Sprites made with the Multiple sprite mode can be used now. For the most part they work the same as Single sprites and both can be mixed freely, with the exceptions that loading a Multiple sprite will load all the sprites in that texture at once, and the Replace button can’t be used when a Multiple sprite is selected.
	• Tile.SetCameraAuto, which allows you to move the camera directly in code with transform.Translate or transform.position, or by using animation with the camera’s transform, rather than using Tile.MoveCamera/SetCameraPosition.
	• Tile.ScreenToMapPosition function, which is useful for converting the mouse position to the map position of a specified layer, so you can easily do things like clicking on a tile.
	• Tile.GetLevelBytes function, which is good for saving or uploading procedurally-generated levels.
	• Tile.SetBorder function, for easily making a border of a given tile around a level.

Changes:
	• Tile.SetTile and Tile.SetTileBlock can optionally specify whether to add or remove colliders. This saves having to use both SetTile and SetCollider separately, since those functions are frequently called together.
	• Likewise, Tile.DeleteTile and Tile.DeleteTileBlock can optionally specify whether to remove any collider that might exist.
	• Tile.SetTile and Tile.SetTileBlock can use TileInfo variables in addition to using the set and tile variables separately.

Improvements:
	• Significant speed improvement if many tiles with physics colliders are set procedurally.
	• If no physics colliders are used, setting/removing collider cells is more efficient.

Fixes:
	• Tile.SetCollider works when used on an empty tile.
	• Fixed issue when removing colliders from tiles that previously had physics colliders.
	• Tile.GetMapPosition and Tile.GetWorldPosition work properly if Tile.SetLayerPosition has been used.
	• Physics colliders are correct for rotated tiles.
	• Fixed issue with SpriteTile not functioning correctly after changing scenes.
	• Tile.EraseLevel properly resets order in layer and rotation.

TileEditor Additions:
	• Editor Preview button, for displaying levels (or part of a level) in the scene view.
	• Delete Preview button, for removing the preview.
	• Holding down the space bar and the mouse button while moving the mouse will pan the level view (like in Photoshop).

TileEditor Changes:
	• The "collider" tile default no longer serves double duty as both the collider cell default and the way to activate physics colliders. Instead, it now only sets the collider cell default. There’s now an additional “use physics collider” setting, which is the way to activate physics colliders.
	• TileEditor displays world positions for each cell in addition to cell coordinates. (If the tile size is 1.0, then the world position is the same as the cell coordinate.)

TileEditor Fixes:
	• The divider between the tiles and groups can be moved correctly if there are more than 8 tile sets.

-----------

SpriteTile 1.1

Additions:
	• Tile.SetTileRenderLayer function, for setting the layer of sprites (that is, the GameObject layer used for rendering, not sorting layer).

Changes:
	• Tile.SetTileMaterial can be called at any time, and doesn't need to be called before SetCamera.
	• Tile.SetColliderMaterial can likewise be called at any time.

Improvements:
	• Better CharacterControl demo script.

Fixes:
	• TileEditor buttons not cut off on Windows.

-----------

SpriteTile 1.0.1

Fixes:
	• Fixed TileEditor DLL so that loading textures works.

-----------

SpriteTile 1.0

Initial release

